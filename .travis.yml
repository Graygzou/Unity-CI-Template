# Example Travis config. See the entire example: https://github.com/JonathanPorta/ci-build

language: csharp
# If let by the gitignore.
solution: Unity-CI-Template.sln

matrix:
  include:
    - os: osx # 10.12
      osx_image: xcode9.1
      dotnet: 2.1.301
      mono: none
      env: DOTNETCORE=1
    - os: osx
      osx_image: xcode9.1
      mono: latest  # Already by default.
      env: MONOCORE=1
    - os: osx
      osx_image: xcode9.1
      dotnet: 2.1.301
      mono: latest
    - os: linux # Ubuntu 14.04
      dist: trusty
      sudo: required

# Specified the branch.
branches:
  only:
    - master

# Environment variables
#env:
#  global:
#    - CODECOV_IO_TOKEN=2ff3d741-5b36-4314-9537-8581706ed054

git:
  depth: 3
  quiet: false
  submodules: false

addons:
  apt:
    packages:
      - xsltproc
      - xmlstarlet
  sonarcloud:
    organization: "graygzou-github"
    token:
      secure: ${SONAR_TOKEN}

# --------------------------------------------------------------------------------
# Set up prerequisites for installing dependencies that you need for you build.
# For example:
#   npm install
#   bundle install
# --------------------------------------------------------------------------------
before_install:
  # Make executable files
  - chmod a+x ./Scripts/*.sh
  # Nuget installs
  - if [ ! $DOTNETCORE ]; then
      ./Scripts/before-install-nuget.sh;
      chmod a+x ./packages/OpenCover.4.6.519/tools/OpenCover.Console.exe;
      chmod a+x ./packages/JetBrains.dotCover.CommandLineTools.2018.1.1/tools/dotCover.exe;
      chmod a+x ./packages/xunit.runner.console.2.3.1/tools/net452/xunit.console.exe;
    fi
  # Apt installs
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo apt-get update;
      sudo apt-get install xmlstarlet;
    else
      brew update > /dev/null
      brew update;
      brew install xmlstarlet;
    fi
  #- ./Scripts/debug.sh

# ---------------------------------------------------
# install : Set up the dependencies of your build.
# ---------------------------------------------------
install:
  - ./Scripts/install.sh
  - ./Scripts/build.sh

# --------------------------------------------------------------------
# Set up your environment before you run your script.
# For example:
#   copy files, start your database, or declare environment variables
# --------------------------------------------------------------------
before_script:

# ---------------------------------
# script : Runs your test script
# ---------------------------------
script:
  # --- DEBUG ---
  #- ./Scripts/debug.sh
  # Inspecting code with the SonarQube Scanner
  - sonar-scanner
  # Build the project with msbuild
  - mono ./packages/MSBuild.SonarQube.Runner.Tool.4.3.0/tools/SonarScanner.MSBuild.exe begin /k:"graygzou:Sonar-UnityBase" /d:sonar.organization="graygzou-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="f3cf5c5dc3d719e4adde6962215181bed5ac0a6d"
  - mono ./packages/MSBuild.SonarQube.Runner.Tool.4.3.0/tools/SonarScanner.MSBuild.exe end /d:sonar.login="f3cf5c5dc3d719e4adde6962215181bed5ac0a6d"
  - ls -l
  - ls -l packages/
  - ls -l -R UnityDLL/
  - msbuild /p:Configuration=Release "Unity-CI-Template.sln"
  - msbuild /p:Configuration=Release "Unity-CI-Template.Editor.sln"
  # Run customs tests.
  - ./Scripts/run-tests.sh
  - dotnet --info
  - dotnet restore
  - dotnet build
  - dotnet test ./Unity-CI-Template.csproj
  - dotnet test ./Unity-CI-Template.Editor.csproj
  # Try something new.... Does not work.
  #- mono --debug --profile=monocov:outfile=monocovCoverage.cov,+Unity-CI-Template ./testrunner/NUnit.ConsoleRunner.3.8.0/tools/nunit3-console.exe --process=Single ./Assets/Library/ScriptAssemblies/Assembly-CSharp.dll
  #- monocov --export-xml=monocovCoverage monocovCoverage.cov
  #- cat monocovCoverage.cov
  # Try convert Unity xml response into NUnit xml.
  #- ./Scripts/fix-unity-test-results.sh
  #- echo "Done"
  # done
  #- ./Scripts/nunit.sh ./Library/ScriptAssemblies/Assembly-CSharp-Editor.dll
  # OpenCover -- Not tested
  #- OpenCover.Console.exe -register:user -target:"%xunit20%\xunit.console.x86.exe" -targetargs:".\MyUnitTests\bin\Debug\MyUnitTests.dll -noshadow" -filter:"+[UnitTestTargetProject*]* -[MyUnitTests*]*" -output:".\MyProject_coverage.xml"
  #- codecov -f "MyProject_coverage.xml
  # -----------------------
  # NUnit tests
  # -----------------------
  - curl -s https://codecov.io/bash > codecov
  - chmod +x codecov
  # Not supported with NUnit 2
  # ...
  #
  # New Test => Cause build to fail.
  # - ./Scripts/test.sh
  #
  # Test with NUnit 3 : !!! Comeback later on that !!!!
  #- mono ./testrunner/NUnit.ConsoleRunner.3.8.0/tools/nunit3-console.exe ./Library/ScriptAssemblies/Assembly-CSharp-Editor.dll
  #- ./codecov -f $(pwd)/TestResult.xml -t $CODECOV_IO_TOKEN
  # ------------------------
  # End
  # ------------------------

# -------------------------------------------------------
# The deployment portion is used to deploy to specific,
# supported hosts, like S3, Heroku, or GitHub Releases.
# -------------------------------------------------------
#after_success:

# Build Matrix
# Creating a build matrix is a way for us to test a wide variety of environments.

# ---------------------------
# set notification options
# ----------------------------
notifications:
  email:
    recipients:
      - boiron.greg@gmail.com
    on_success: change # Default: change. Can be replace by never.
    on_failure: always # Default: always
